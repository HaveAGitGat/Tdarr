name: Build
#24
on: [push, pull_request]

jobs:
  build_win32:
    name: Build for ${{ matrix.os }}
    runs-on:
      ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2019]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Installing Meteor
        run: |       
          choco install meteor -y
          echo ::add-path::C:\Users\runneradmin\AppData\Local\.meteor
          
      - name: Updating Meteor
        timeout-minutes: 5
        continue-on-error: true
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor update
          
      - name: Updating Meteor 2 [Windows FIX]
        timeout-minutes: 5
        continue-on-error: true
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor update
      
      - name: Updating Meteor 3 [Windows FIX]
        timeout-minutes: 5
        continue-on-error: true
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor update

      - name: Updating Meteor 4 [Windows FIX]
        timeout-minutes: 5
        continue-on-error: true
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor update

      - name: Updating Meteor 5 [Windows FIX]
        timeout-minutes: 5
        continue-on-error: true
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor update

      - name: Installing npm dependencies
        run: |
          meteor npm install --production

      - name: Building Tdarr
        env:
          TOOL_NODE_FLAGS: --max-old-space-size=4096
        run: |
          meteor build --server localhost:8265 --directory .\tdarr-${{ matrix.os }} --architecture os.windows.x86_64
      
      - name: Zipping Tdarr
        run: |
          mkdir .\out
          7z a -r .\out\tdarr-${{ matrix.os }}.zip .\tdarr-${{ matrix.os }}

      - name: Publishing tdarr-${{ matrix.os }}
        uses: actions/upload-artifact@v1
        with:
          name: tdarr-${{ matrix.os }}
          path: .\out
  
  build_darwin_linux:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install Meteor
        run: curl https://install.meteor.com/ | sh
      
      - name: Install NPM and build
        run: |
          meteor npm install --production
          meteor build --server localhost:8265 --directory Tdarr
      
      - name: Pack ${{ matrix.os }}.zip
        run: |
          zip -r -q tdarr-${{ matrix.os }}.zip Tdarr -x *.exe /
      
      - name: Verify zip
        run: |
          unzip -q tdarr-${{ matrix.os }}.zip -d ./temp
          ls -la ./temp
      
      - name: Upload tdarr-${{ matrix.os }}.zip
        uses: actions/upload-artifact@v1
        with:
          name: tdarr-${{ matrix.os }}
          path: tdarr-${{ matrix.os }}.zip
  
  release:
    name: Building release
    needs: [build_win32, build_darwin_linux]
    runs-on: ubuntu-18.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Getting version and changelog
        id: meta_gathering
        run: |
          changelog=$(tail -n +3 latest.txt)
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "::set-output name=version::v$(grep "newVersion, setNewVersion" imports/ui/App.jsx | awk -F"[()]" '{print $2}')-Beta"
          echo "::set-output name=relname::$(cat latest.txt | head -1)"
          echo "::set-output name=changelog::$changelog"
      
      - name: Download tdarr-ubuntu-18.04.zip
        uses: actions/download-artifact@v1
        with:
          name: tdarr-ubuntu-18.04
      
      - name: Download tdarr-macos-10.15.zip
        uses: actions/download-artifact@v1
        with:
          name: tdarr-macos-10.15
      
      - name: Download tdarr-windows-2019.zip
        uses: actions/download-artifact@v1
        with:
          name: tdarr-windows-2019
      
      - name: Verifying zip
        run: |
          mkdir ./temp
          unzip -q ./tdarr-ubuntu-18.04/tdarr-ubuntu-18.04.zip -d ./temp/ubuntu
          unzip -q ./tdarr-macos-10.15/tdarr-macos-10.15.zip -d ./temp/macos
          unzip -q ./tdarr-windows-2019/tdarr-windows-2019.zip -d ./temp/windows
     
      - name: Sanity check
        run: |
          printf "${{ steps.meta_gathering.outputs.version }}"
          printf "${{ steps.meta_gathering.outputs.relname }}"
          printf "${{ steps.meta_gathering.outputs.changelog }}"
      
      - name: Creating Release
        id: create_release
        uses: actions/create-release@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.meta_gathering.outputs.version }}
          release_name: ${{ steps.meta_gathering.outputs.relname }}
          body: |
            ${{ steps.meta_gathering.outputs.changelog }}
          draft: false
          prerelease: true
      
      - name: Uploading Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tdarr-ubuntu-18.04/tdarr-ubuntu-18.04.zip
          asset_name: Tdarr-Linux.zip
          asset_content_type: application/zip
      
      - name: Uploading macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tdarr-macos-10.15/tdarr-macos-10.15.zip
          asset_name: Tdarr-macOS.zip
          asset_content_type: application/zip
      
      - name: Uploading Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tdarr-windows-2019/tdarr-windows-2019.zip
          asset_name: Tdarr-Windows.zip
          asset_content_type: application/zip
  
  docker:
    name: Building Docker images
    needs: [build_darwin_linux, release] 
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Create Variables
        id: vars
        env:
          _repo: ${{github.repository}}
          _ref: ${{github.ref}}
        run: |
          echo "::set-output name=branch::$(echo ${_ref} | cut -d/ -f3)"
          echo "::set-output name=username::$(echo ${_repo} | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=repo::$(echo ${_repo} | tr '[:upper:]' '[:lower:]')"
          echo "::set-output name=version::$(grep "newVersion, setNewVersion" imports/ui/App.jsx | awk -F"[()]" '{print $2}')"
      - name: Printing Variables
        run: |
          echo "${{ steps.vars.outputs.branch }} && ${{github.ref}}"
          echo "${{ steps.vars.outputs.username }} && ${{github.repository}}"
          echo ${{ steps.vars.outputs.repo }}
      
      - name: Download tdarr-ubuntu-18.04.zip
        uses: actions/download-artifact@v1
        with:
          name: tdarr-ubuntu-18.04
      
      - name: Building buildstage Docker
        working-directory: ./docker/build
        env:
          REPO: ${{ steps.vars.outputs.repo }}
          BRANCH: ${{ steps.vars.outputs.branch }}
        run: |          
          docker build -t $REPO:build \
                       -t $REPO:build_${{ steps.vars.outputs.version }} \
                       --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                       --build-arg VCS_URL=${{ steps.vars.outputs.repo }} \
                       --build-arg VENDOR=${{ steps.vars.outputs.username }} \
                       --build-arg VERSION=${{ steps.vars.outputs.version }} .
      
      - name: Logging into Dockerhub
        env:
          DOCKER_USERNAME: ${{ steps.vars.outputs.username }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      
      - name: Pushing the image to Dockerhub
        env:
          REPO: ${{ steps.vars.outputs.repo }}
        run: docker push $REPO      
      
      - name: Copying Tdarr release
        run: |
          mkdir ./temp
          unzip -q ./tdarr-ubuntu-18.04/tdarr-ubuntu-18.04.zip -d ./temp/ubuntu      
          cp -a ./temp/ubuntu/Tdarr ./docker/tdarr/

      - name: Building Tdarr Docker
        working-directory: ./docker/tdarr
        env:
          REPO: ${{ steps.vars.outputs.repo }}
          BRANCH: ${{ steps.vars.outputs.branch }}
        run: |          
          docker build -t $REPO \
                       -t $REPO:${{ steps.vars.outputs.version }} \
                       --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                       --build-arg REPO=$REPO \
                       --build-arg VCS_URL=${{ steps.vars.outputs.repo }} \
                       --build-arg VENDOR=${{ steps.vars.outputs.username }} \
                       --build-arg VERSION=${{ steps.vars.outputs.version }} .
            
      - name: Pushing the image to Dockerhub
        env:
          REPO: ${{ steps.vars.outputs.repo }}
        run: docker push $REPO 
